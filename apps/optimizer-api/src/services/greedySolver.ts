import {OptimizedCartResult} from '@libs/shared/types/src/optimizer-cart';
import {AlternativePayload} from '@libs/shared/types/src/optimizer';

export function solveGreedy(
    alternativesPerProduct: AlternativePayload[][],
    maxBudget?: number
): OptimizedCartResult {
    const selectedAlternatives: AlternativePayload[] = [];
    let totalPrice = 0;

    console.log('\n[Greedy] üìå –ü–æ—á–∞—Ç–æ–∫ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ—à–∏–∫–∞:');
    console.log(`[Greedy] –î–æ–∑–≤–æ–ª–µ–Ω–∏–π –±—é–¥–∂–µ—Ç: ${maxBudget !== undefined ? (maxBudget / 100).toFixed(2) + ' –≥—Ä–Ω' : '–Ω–µ –æ–±–º–µ–∂–µ–Ω–æ'}`);

    alternativesPerProduct.forEach((alternatives, index) => {
        console.log(`\n[Greedy] –¢–æ–≤–∞—Ä #${index + 1}`);
        for (const alt of alternatives) {
            const nextTotalPrice = totalPrice + alt.price;

            console.log(`[Greedy] ‚Üí –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: ID ${alt.id}, –ú–∞–≥–∞–∑–∏–Ω: ${alt.shop}, –¶—ñ–Ω–∞: ${(alt.price / 100).toFixed(2)} –≥—Ä–Ω`);

            if (maxBudget === undefined || nextTotalPrice <= maxBudget) {
                selectedAlternatives.push(alt);
                totalPrice = nextTotalPrice;
                console.log(`[Greedy] ‚úÖ –û–±—Ä–∞–Ω–æ! –ù–∞–∫–æ–ø–∏—á–µ–Ω–∞ —Å—É–º–∞: ${(totalPrice / 100).toFixed(2)} –≥—Ä–Ω`);
                break;
            } else {
                console.log(`[Greedy] ‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ (–ø–µ—Ä–µ–≤–∏—â—É—î –±—é–¥–∂–µ—Ç)`);
            }
        }
    });

    console.log('\n[Greedy] üìå –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ.');
    console.log(`[Greedy] –û–±—Ä–∞–Ω–æ —Ç–æ–≤–∞—Ä—ñ–≤: ${selectedAlternatives.length}`);
    console.log(`[Greedy] –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: ${(totalPrice / 100).toFixed(2)} –≥—Ä–Ω`);

    return {
        selectedAlternatives,
        totalPrice
    };
}
